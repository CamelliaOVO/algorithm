1、爬楼梯问题
给你一个整数数组 cost ，其中 cost[i] 是从楼梯第 i 个台阶向上爬需要支付的费用。一旦你支付此费用，即可选择向上爬一个或者两个台阶。
你可以选择从下标为 0 或下标为 1 的台阶开始爬楼梯。
请你计算并返回达到楼梯顶部的最低花费。

class Solution {
public:
    int minCostClimbingStairs(vector<int>& cost) {
        int n = cost.size();//一共有n个阶梯，对应下标0到n-1，算上顶层n，一共n+1
        vector<int> dp(n + 1);
        dp[0] = dp[1] = 0;  //一开始可以从第0阶或者第一阶直接爬
        for (int i = 2; i <= n; i++) {
            dp[i] = min(dp[i - 1] + cost[i - 1], dp[i - 2] + cost[i - 2]);//状态转移方程：爬到第i-1或者i-2个时，有两种方案：cost[i-1]和cost[i-2],dp[i-1]是爬到i-1时前面所花时间，这个dp[i-1]和dp[i-2]两个状态一开始为0，随着这个方程和cost相加逐渐变化
        }
        return dp[n];
    }
};
使用滚动数组优化
class Solution {
public:
    int minCostClimbingStairs(vector<int>& cost) {
        int n = cost.size();
        int prev = 0, curr = 0;
        for (int i = 2; i <= n; i++) {
            int next = min(curr + cost[i - 1], prev + cost[i - 2]);
            prev = curr;
            curr = next;
        }
        return curr;
    }
};

2、小偷问题
你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。

给定一个代表每个房屋存放金额的非负整数数组，计算你 不触动警报装置的情况下 ，一夜之内能够偷窃到的最高金额。

class Solution {
public:
    int rob(vector<int>& nums) {
        int size = nums.size();
        vector<int> dp = vector<int>(size,0);
        if(size == 0){
            return 0;
        }
        if(size == 1){
            return nums[0];
        }
        if(size == 2){
            return max(nums[0],nums[1]);
        }

        dp[0] = nums[0];
        dp[1] = max(nums[0],nums[1]);
        if(size >2){
            for(int i =2;i <size;i++){
                dp[i] = max(dp[i-2]+nums[i],dp[i-1]);

            }
        }
        return dp[size-1];

    }
};



