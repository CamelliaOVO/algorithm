1、直线上最多的点数
给你一个数组 points ，其中 points[i] = [xi, yi] 表示 X-Y 平面上的一个点。求最多有多少个点在同一条直线上。

class Solution {
public:
    int gcd(int a,int b){        //递归重新定义最大公约数函数
        return b ? gcd(b,a%b) : a;
    }
    int maxPoints(vector<vector<int>>& points) {
        int n = points.size();
        if(n <= 2){      //点的总数小于等于2个，那么直接组成一条直线
            return n;
        }
        int res = 0;

        
        for(int i =0;i<n;i++){       //最外层从第一个点开始遍历
            if(res >=n-i||res > n/2){  //如果res的个数大于等于n-i或大于二分之n，说明这个res就是结果，中断循环
                break;
            }
            unordered_map<int, int> mp;  //定义哈希表mp
            for(int j =i+1;j<n;j++){  //从i+1开始找第二个能与第i个组成一条直线的点，i前面的不用找，因为会重复
                int x = points[i][0] - points[j][0];
                int y = points[i][1] - points[j][1];
                if(x == 0){
                    y = 1;
                }else if(y == 0){
                    x = 1;
                }else{
                    if( y < 0){
                        x = -x;
                        y = -y;
                    }
                    int gcdXY = gcd(abs(x),abs(y));   //以下三行为对斜率的约分操作
                    x/= gcdXY;
                    y/= gcdXY;
                }
                mp[y+x*20001]++; //x精度确认，存入mp
            }
            int maxn = 0;
            for(auto&[_,num]:mp){
                maxn = max(maxn,num+1);

            }
            res = max(res,maxn);

        
        }
        return res;

    }
};
