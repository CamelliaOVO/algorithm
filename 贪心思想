1、种花问题（贪心：实时更新值）
假设有一个很长的花坛，一部分地块种植了花，另一部分却没有。可是，花不能种植在相邻的地块上，它们会争夺水源，两者都会死去。
给你一个整数数组 flowerbed 表示花坛，由若干 0 和 1 组成，其中 0 表示没种植花，1 表示种植了花。另有一个数 n ，能否在不打破种植规则的情况下种入 n 朵花？能则返回 true ，不能则返回 false 。
输入：flowerbed = [1,0,0,0,1], n = 2
输出：false
 
class Solution {
public:
    bool canPlaceFlowers(vector<int>& flowerbed, int n) {//只用求出count：这个数组按照规则最大能装的花数，如果大于等于n，就可以装
        int m = flowerbed.size();
        int prev =-1;  //用prev实时更新每个地块是否装有花
        int count = 0;
        for(int i=0;i<m;i++){//遍历花坛
            if(flowerbed[i] == 1){  //如果找到了种了花的地块
                if(prev<0){     //如果之前还没有种过花
                    count+=i/2;   //可以种的数量就是i/2
                }else{      //如果之前种过花
                    count+=(i-prev-2)/2;   //这之间的区域可以种（i-prev-2）/2块花
                }
                prev = i;//实时更新prev
            }
        }
        if(prev <0){   //遍历完花坛，如果还没遇到果种花的地块，则直接count就等于m+1/2，除法是向下取整，所以需要m+1防止m为奇数
            count+=(m+1)/2;
        }
        else{
            count+=(m-prev-1)/2;//遍历完花坛，如果有一到多个地有花，则可以种的数量为（m-prev-1）/2
        }
        return count>=n;

    }
};
