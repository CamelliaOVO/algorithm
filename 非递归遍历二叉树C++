1、后序非递归遍历二叉树（用栈实现）

#include <iostream>
#include <stack>
using namespace std;

struct TreeNode {
    string val;
    TreeNode* left;
    TreeNode* right;
    TreeNode(string x) : val(x), left(nullptr), right(nullptr) {}
};

void postorderTraversal(TreeNode* root) {
    if (root == nullptr) return;  //根节点不存在（空树）的处理：直接返回函数

    stack<TreeNode*> stack;
    TreeNode* prev = nullptr; // 用于记录上一个访问的节点
    TreeNode* current = root;

    while (current != nullptr || !stack.empty()) {
        // 先遍历左子树到底部
        while (current != nullptr) {
            stack.push(current);
            current = current->left;
        }

        // 定位到当前子树的右节点或者根节点
        current = stack.top();
        if (current->right == nullptr || current->right == prev) {
            // 如果右子树为空，或者右子树已经访问过，则访问根节点
            stack.pop();
            cout << current->val << " "; // 输出当前节点的值
            prev = current; // 更新prev为当前节点
            current = nullptr; // 移动到下一个节点
        }
        else {
            // 如果右子树不为空，将当前节点的右子树加入栈中，重新从右子树的左子树开始遍历（那个根节点没有左子树只有右子树的情况）
            current = current->right;
        }
    }
}

// 示例
int main() {
    TreeNode* root = new TreeNode("A");
    root->left = new TreeNode("B");
    root->right = new TreeNode("C");
    root->left->left = new TreeNode("D");
    root->left->right = new TreeNode("E");
    root->right->left = new TreeNode("F");
    root->right->right = new TreeNode("G");

    postorderTraversal(root);

    return 0;
}








2、中序非递归遍历二叉树

#include <iostream>
#include <stack>
using namespace std;

struct TreeNode {
    int val;
    TreeNode* left;
    TreeNode* right;
    TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
};

void inorderTraversalNonRecursive(TreeNode* root) {
    if (!root) return;

    stack<TreeNode*> stack;
    TreeNode* current = root;

    while (current != nullptr || !stack.empty()) {
        // 遍历左子树到底部(一路遍历到的压入栈)
        while (current != nullptr) {
            stack.push(current);
            current = current->left;
        }
        // 访问当前节点，并转到右子树
        current = stack.top();
        stack.pop();
        cout << current->val << " ";
        current = current->right;
    }
}

// 使用示例
int main() {
    // 构建一个简单的二叉树
    //      1
    //     / \
    //    2   3
    //   / \
    //  4   5
    TreeNode* root = new TreeNode(1);
    root->left = new TreeNode(2);
    root->right = new TreeNode(3);
    root->left->left = new TreeNode(4);
    root->left->right = new TreeNode(5);

    inorderTraversalNonRecursive(root);

   

    return 0;
}




3、先序非递归遍历二叉树
#include <iostream>
#include <stack>

// 定义二叉树的节点结构
struct TreeNode {
    char val;
    TreeNode* left;
    TreeNode* right;
    TreeNode(char x) : val(x), left(nullptr), right(nullptr) {}
};

// 非递归先序遍历二叉树
void nonRecursivePreorderTraversal(TreeNode* root) {
    if (root == nullptr) return;

    std::stack<TreeNode*> stack;
    TreeNode* current = root;
    while (current != nullptr || !stack.empty()) {
        // 先访问根节点
        while (current != nullptr) {
            std::cout << current->val << " ";  // 处理当前节点
            stack.push(current);                // 将当前节点压入栈中
            current = current->left;           // 转向左子树
        }
        // 当前节点为空，从栈中取节点作为新根
        current = stack.top();
        stack.pop();
        // 转向右子树
        current = current->right;
    }
}



int main() {
    TreeNode* root = new TreeNode('A');
    root->left = new TreeNode('B');
    root->right = new TreeNode('C');
    root->left->left = new TreeNode('D');
    root->left->right = new TreeNode('E');
    nonRecursivePreorderTraversal(root);
    return 0;
}

4、层次顺序遍历二叉树
#include <iostream>
#include <queue>

using namespace std;

struct TreeNode {   //初始化二叉树
    string val;
    TreeNode* left;
    TreeNode* right;

    TreeNode(string value) : val(value), left(nullptr), right(nullptr) {}
};

void level_by_level_Traversal(TreeNode* root) {
    if (root == nullptr) {         //如果没有根节点，则返回空树
        return;
    }

    queue<TreeNode*> q;     //初始化队列q
    q.push(root);         //将根节点插入队列q中，成为队头

    while (!q.empty()) {        //当队非空时，循环操作
        TreeNode* node = q.front();      //每次循环都将队头元素视为根节点，方便后续对左右孩子进行操作
        cout << node->val << " ";      //输出打印根节点
        q.pop();           //弹出根节点，并访问将这个根节点的左右孩子插入队列

        if (node->left != nullptr) {  //左孩子非空则插入左孩子
            q.push(node->left);
        }

        if (node->right != nullptr) {  //有孩子非空则插入右孩子
            q.push(node->right);
        }
    }
}

int main() {
    // 创建一个二叉树
    TreeNode* root = new TreeNode("A");
    root->left = new TreeNode("B");
    root->right = new TreeNode("C");
    root->left->left = new TreeNode("D");
    root->left->right = new TreeNode("E");
    root->right->left = new TreeNode("F");
    root->right->right = new TreeNode("G");

    // 层次遍历二叉树
    cout << "层次遍历结果：" << endl;
    level_by_level_Traversal(root);
    cout << endl;
    

    return 0;
}
