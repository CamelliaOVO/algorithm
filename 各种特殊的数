1、丑数
丑数 就是只包含质因数 2、3 和 5 的正整数。
给你一个整数 n ，请你判断 n 是否为 丑数 。如果是，返回 true ；否则，返回 false 。
class Solution {
public:
    bool isUgly(int n) {
        if(n <= 0){
            return false;
        }
        else{
            vector<int> mps = {2,3,5};
            for(int mp : mps){
                while(n % mp == 0){
                    n /= mp;
                }
            }
        }
        return n == 1;

    }
};


2、回文数
给你一个整数 x ，如果 x 是一个回文整数，返回 true ；否则，返回 false 。

回文数
是指正序（从左向右）和倒序（从右向左）读都是一样的整数。

例如，121 是回文，而 123 不是。
class Solution {
public:
    bool isPalindrome(int x) {
        //算法：反转x的后半部分，看看和前半部分是否一样
        
        
        if(x < 0  || (x % 10 == 0 && x != 0 )){   //先排除x的负数情况或者x以0结尾的情况（x不为0）
            return false;
        }
        
        int rev = 0;
        while(x > rev){
            rev = rev * 10 + x%10;  //rev作为x的后半部分的反转
            x /=10;  //每次改变x，使最后x的值为前半部分的值
        }

        return x == rev || x == rev / 10;   //考虑到x的位数为偶数和奇数的情况
    

    }
};


3、质数
给定整数 n ，返回 所有小于非负整数 n 的质数的数量 。
class Solution {
public:
    
    int countPrimes(int n) {
        vector<int> isPrime(n,1); //定义一个向量，大小为n个，每个都设为1代表都是质数
        int ans =0;   //质数总数
        for(int i=2;i<n;i++){   //大循环从2开始遍历，因为1不是质数
            if(isPrime[i]){     //向量为一则是质数，积累ans，2是质数，所以先让ans+1，再开始内层循环
                ans+=1;
                if((long long)i * i<n){  //i方小于n时，每个i方加i一定不是质数，因为可以除以i
                    for(int j =i * i;j<n;j+=i){
                        isPrime[j] = 0;
                    }
                }

            }
        }
        return ans;
        

    }

};

4、泰波那契数（下一个数等于前三个数的和）
泰波那契序列 Tn 定义如下： 

T0 = 0, T1 = 1, T2 = 1, 且在 n >= 0 的条件下 Tn+3 = Tn + Tn+1 + Tn+2

给你整数 n，请返回第 n 个泰波那契数 Tn 的值。
class Solution {
public:
    int tribonacci(int n) {
        int p =0,q=0,r=1,s=1;
        if(n == 0){
            return 0;
        }
        else if(n == 1 || n==2){
            return 1;
        }
        else{
            for(int i=3;i<=n;i++){//滚动数组，s为Tn，从2开始，所以一开始p不存在，就设为0，从T3开始滚动
                p =q;
                q=r;
                r=s;
                s=p+q+r;
            }
        }
        return s;


    }
};


5、快乐数
编写一个算法来判断一个数 n 是不是快乐数。

「快乐数」 定义为：
对于一个正整数，每一次将该数替换为它每个位置上的数字的平方和。
然后重复这个过程直到这个数变为 1，也可能是 无限循环 但始终变不到 1。
如果这个过程 结果为 1，那么这个数就是快乐数。
如果 n 是 快乐数 就返回 true ；不是，则返回 false 。
示例 1：
输入：n = 19
输出：true
解释：
1^2 + 9^2 = 82
8^2 + 2^2 = 68
6^2 + 8^2 = 100
1^2 + 0^2 + 0^2 = 1

class Solution {
public:
    int bitSquareSum(int n) {
        int sum = 0;
        while(n > 0)
        {
            int bit = n % 10;
            sum += bit * bit;
            n = n / 10;
        }
        return sum;
    }
    
    bool isHappy(int n) {        //快慢指针思想
        int slow = n, fast = n;
        do{
            slow = bitSquareSum(slow);
            fast = bitSquareSum(fast);
            fast = bitSquareSum(fast);
        }while(slow != fast);
        
        return slow == 1;
    }
};




