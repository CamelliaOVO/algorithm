1、插入排序
直接插入排序
void InsertSort(int A[],int n){
    int i,j;
    for(i = 2;i<=n;i++){
        if(A[i]<A[i-1]){
            A[0] = A[i];
            for(j=i-1;A[0]<A[j];--j){
                A[j+1] = A[j];
            A[j+1] = A[0];
            }
        }
    }
}
空间复杂度：O(1)
时间复杂度：O(n^2)主要来自对比关键字、移动元素，若有n个元素，则需要n-1趟处理

2、希尔排序（插入排序的进阶）
void ShellSort(int A[],int n){
    int d, i, j;
    for(d =n/2;d>=1;d=d/2){
        for(i = d+1;i<=n;++i){
            if(A[i]<A[i-d]){
                A[0] = A[i];
                for(j = i-d;j>0&&A[0]<A[j];j-=d){
                    A[j+d] = A[j];
                }
                A[j+d] = A[0];
            }
           
        }
    }
}
空间复杂度：O(1)
最坏时间复杂度:O(n^2)

3、冒泡排序
void swap(int &a,int &b){
    int temp = a;
    a = b;
    b = temp;
}
void BubbleSort(int A[],int n){
    for(int i=0;i<n-1;i++){
        bool flag = false;
        for(int j=n-1;j>i;j--){
            if(A[j-1]>A[j]){
                swap(A[j-1],A[j]);
                flag=true;
            }
        }
        if(flag == false){
            return;
        }
    }
}
空间复杂度：O(1)
最坏和平均时间复杂度：O（n^2）

4、快速排序
int Partition(int A[],int low,int high){ //得到划分枢轴存放的位置
    int pivot=A[low];
    while(low<high){
        while(low<high&&A[high]>=pivot){
            --high;
        }
        A[low] = A[high];
        while(low<high&&A[low]<=pivot){
            ++low;
        }
        A[high] = A[low];
    }
    A[low] = pivot;
    return low;
}

void QuickSort(int A[],int low,int high){
    if(low<high){
        int pivotpos=Partition(A,low,high);//第一次划分
        QuickSort(A,low,pivotpos-1);//再次划分左半部分
        QuickSort(A,pivotpos+1,high);//再次划分右半部分
        
    }
    
}

时间复杂度：O（n*递归层数）
空间复杂度：O(递归层数)

