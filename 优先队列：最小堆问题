给你一个下标从 0 开始的整数数组 costs ，其中 costs[i] 是雇佣第 i 位工人的代价。

同时给你两个整数 k 和 candidates 。我们想根据以下规则恰好雇佣 k 位工人：

总共进行 k 轮雇佣，且每一轮恰好雇佣一位工人。
在每一轮雇佣中，从最前面 candidates 和最后面 candidates 人中选出代价最小的一位工人，如果有多位代价相同且最小的工人，选择下标更小的一位工人。
比方说，costs = [3,2,7,7,1,2] 且 candidates = 2 ，第一轮雇佣中，我们选择第 4 位工人，因为他的代价最小 [3,2,7,7,1,2] 。
第二轮雇佣，我们选择第 1 位工人，因为他们的代价与第 4 位工人一样都是最小代价，而且下标更小，[3,2,7,7,2] 。注意每一轮雇佣后，剩余工人的下标可能会发生变化。
如果剩余员工数目不足 candidates 人，那么下一轮雇佣他们中代价最小的一人，如果有多位代价相同且最小的工人，选择下标更小的一位工人。
一位工人只能被选择一次。
返回雇佣恰好 k 位工人的总代价





优先队列（堆）












class Solution {
public:
    long long totalCost(vector<int>& costs, int k, int candidates) {
        int n = costs.size();
        //构造一个优先队列（最小堆/小根堆），第一个pair<>为存储的元素：键值对，第二个元素是一个容器，第三个元素是规则，递升规则，说明最前面是最小的，是一个最小堆
        priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>> q;  
        //left和right确定左右边距离尽头k个长度的边界
        int left = candidates-1;   //数组从0开始，candidiates-1
        int right = n-candidates;  
        if(left +1<right){        //2k小于n的情况，也就是人有剩余
            for(int i = 0; i<= left;i++){    //从0开始，直到左指针，循环遍历
                q.emplace(costs[i],i);      //由于优先队列q存储的是键值对，所以q的empalce函数的括号内也应该是键值对，costs【i】为定价为第一考虑因素，下标i为第二考虑因素

            }
            for(int i =right;i<n;i++){       //从右指针开始，直到右边界，循环遍历，注意这时没有改变指针指向
                q.emplace(costs[i],i);
            }
        }
        else{                     //2k大于n，所有人都要入堆
            for(int i =0; i<n;i++){            //遍历整个数组
                q.emplace(costs[i],i);
            }

        }
        long long ans =0;         //注意要设置long long，int不足以表达
        for(int i =0; i<k;i++){        //遍历k次，k轮雇佣
            auto[cost,label] = q.top();//将最小堆的最顶元素赋予一个未知类型的变量，代表从最小堆中提取两个值
            q.pop();          //弹出元素
            ans += cost;
            if(left +1 <right){      
                if(label <= left){  //下标比left小，则是前面的工人，left移动向右
                    ++left;
                    q.emplace(costs[left],left);
                }
                else{           //下标比right大，则是后面的工人，right向前移动
                    --right;
                    q.emplace(costs[right],right);
                }

            }
        }

        return ans;

    }
};
